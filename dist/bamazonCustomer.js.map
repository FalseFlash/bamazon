{"version":3,"sources":["../bamazonCustomer.js"],"names":["fs","mysql","prompt","existsSync","writeFileSync","list","head","sql","createConnection","host","user","password","database","connect","err","console","log","query","results","fields","forEach","data","id","name","product_name","price","stock","stock_quantity","push","symbol","code","format","toString","purchase","info","properties","ID","description","quantity","start","get","res","bought","parseInt","stop","math","end"],"mappings":"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","file":"bamazonCustomer.js","sourcesContent":["'use strict';\r\n\r\nimport * as fs from 'fs';\r\nimport * as mysql from 'mysql';\r\nimport * as prompt from 'prompt'\r\nimport Table from 'cli-table';\r\nimport formatCurrency from 'format-currency';\r\n\r\n// Check to see if we have a password file. Make one if we don't.\r\nif (!fs.existsSync('./password.js')) {\r\n    fs.writeFileSync('./password.js', \"exports.password = '';\");\r\n}\r\n\r\n// SQL requires and password, so here we have a private file.\r\nimport password from './password';\r\n\r\n// An object list to hold the items.\r\n\r\n// Setup the CLI table.\r\nlet list = new Table({\r\n    head: ['ID', 'Product', 'Price', 'Stock']\r\n});\r\n\r\nconst sql = new mysql.createConnection({\r\n    host: 'localhost',\r\n    user: 'root',\r\n    password: password.password,\r\n    database: 'bamazon_db'\r\n});\r\n\r\nsql.connect((err) => {\r\n    if (err) throw err;\r\n\r\n    console.log('Connected!');\r\n});\r\n\r\nsql.query('SELECT * FROM products;', (err, results, fields) => {\r\n    if (err) throw err;\r\n\r\n    results.forEach((data) => {\r\n        let id = data.id;\r\n        let name = data.product_name;\r\n        let price = data.price;\r\n        let stock = data.stock_quantity;\r\n\r\n        list.push([\r\n            id, name, formatCurrency(price, {\r\n                symbol: '$',\r\n                code: 'USD',\r\n                format: '%s%v'\r\n            }), (stock <= 0) ? 'Out of Stock' : stock\r\n        ])\r\n    });\r\n\r\n    console.log(list.toString());\r\n\r\n    purchase();\r\n});\r\n\r\nconst purchase = () => {\r\n    let info = {\r\n        properties: {\r\n            ID: {\r\n                description: 'Enter the Item ID you wish to purchase '\r\n            },\r\n            quantity: {\r\n                description: 'How many do you wish to purchase? '\r\n            }\r\n        }\r\n    };\r\n\r\n    prompt.start();\r\n\r\n    prompt.get(info, (err, res) => {\r\n        let bought = {\r\n            ID: res.ID,\r\n            quantity: res.quantity,\r\n            stock: 0\r\n        };\r\n\r\n        sql.query(`SELECT id, stock_quantity, product_name FROM products WHERE id=? LIMIT 1`, bought.ID, (err, results, fields) => {\r\n            let data = results[0];\r\n\r\n            const stock = parseInt(data.stock_quantity);\r\n            bought.stock = stock;\r\n\r\n            if ((bought.quantity > stock) || (stock <= 0)) {\r\n                prompt.stop();\r\n                return console.log(`Insufficient quantity! Not enough in stock to purchase ${bought.quantity}`);\r\n            }\r\n\r\n            let math = parseInt(bought.stock) - parseInt(bought.quantity);\r\n\r\n            sql.query(\"UPDATE products SET stock_quantity=\" + math + \" WHERE id=\" + bought.ID);\r\n            sql.query(\"INSERT INTO sales (product_id, quantity_purchased) VALUE (\" + bought.ID + \", \" + bought.quantity + \")\");\r\n            console.log(\"Purchase successful!\");\r\n            prompt.stop();\r\n            sql.end();\r\n        }); // End SQL stock query\r\n\r\n    }); // End prompt get\r\n};"]}